---
const { title = "patientguide.io", description = "" } = Astro.props;
---

<html lang="en" data-theme="">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{title}</title>
    {description && <meta name="description" content={description} />}

    <!-- Inter font -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap"
      rel="stylesheet"
    />

    <style>
      :root { color-scheme: light dark; }

      /* Light (default) */
      :root, html[data-theme="light"] {
        --bg: #ffffff;
        --text: #222;
        --muted: #f6f7f8;
        --border: #dcdcdc;
        --link: #0366d6;
        --link-hover: #024ea8;
        --nav-bg: var(--muted);
      }

      /* Dark */
      html[data-theme="dark"] {
        --bg: #0f1115;
        --text: #e6e6e6;
        --muted: #151922;
        --border: #252a36;
        --link: #8ab4f8;
        --link-hover: #b3ccff;
        --nav-bg: #0f141d;
      }

      /* Auto (system) when no manual choice set */
      @media (prefers-color-scheme: dark) {
        html:not([data-theme]) {
          --bg: #0f1115;
          --text: #e6e6e6;
          --muted: #151922;
          --border: #252a36;
          --link: #8ab4f8;
          --link-hover: #b3ccff;
          --nav-bg: #0f141d;
        }
      }

      * { box-sizing: border-box; }
      body {
        margin: 0;
        font-family: "Inter", system-ui, -apple-system, Segoe UI, Roboto, sans-serif;
        line-height: 1.55;
        background: var(--bg);
        color: var(--text);
        transition: background-color .25s ease, color .25s ease;
      }

      /* Subtle page fade-in (respects reduced motion) */
      @media (prefers-reduced-motion: no-preference) {
        @keyframes fade-in { from { opacity: 0 } to { opacity: 1 } }
        body { animation: fade-in .22s ease-out both; }
      }

      nav {
        display: flex; gap: 1rem; flex-wrap: wrap; align-items: center;
        padding: 1rem; background: var(--nav-bg); border-bottom: 1px solid var(--border);
        transition: background-color .25s ease, border-color .25s ease;
      }
      nav a {
        text-decoration: none; color: var(--link); font-weight: 600;
        transition: color .25s ease;
      }
      nav a:hover { color: var(--link-hover); text-decoration: underline; }

      .spacer { flex: 1; }

      .toggle {
        margin-left: auto;
        display: inline-flex; align-items: center; gap: .5rem;
        font-size: .9rem; color: var(--text);
        background: transparent; border: 1px solid var(--border);
        padding: .4rem .7rem; border-radius: .5rem; cursor: pointer;
        transition: border-color .25s ease, color .25s ease, background-color .25s ease;
      }
      .toggle .icon {
        display: inline-block;
        font-size: 1rem; line-height: 1;
        transform-origin: 50% 50%;
      }
      .toggle:hover { background: var(--muted); }

      /* Micro animation for icon on toggle */
      @keyframes pop-spin {
        0%   { transform: scale(0.9) rotate(0deg); opacity: .8; }
        60%  { transform: scale(1.15) rotate(25deg); opacity: 1; }
        100% { transform: scale(1) rotate(0deg); }
      }
      .icon-animate { animation: pop-spin .25s ease; }

      main {
        max-width: 820px; margin: 2rem auto; padding: 0 1rem;
        transition: color .25s ease;
      }
    </style>

    <!-- GoatCounter (human-only analytics) -->
    <script
      data-goatcounter="https://quantf.goatcounter.com/count"
      async
      src="//gc.zgo.at/count.js">
    </script>

    <!-- Set saved theme before paint -->
    <script>
      (() => {
        try {
          const saved = localStorage.getItem("pg-theme");
          if (saved === "light" || saved === "dark") {
            document.documentElement.setAttribute("data-theme", saved);
          }
        } catch {}
      })();
    </script>
  </head>
  <body>
    <nav>
      <a href="/">Home</a>
      <a href="/guides/">Guides</a>
      <a href="/posts/">Posts</a>
      <a href="/contact/">Contact</a>
      <span class="spacer"></span>

      <button class="toggle" id="theme-toggle" aria-label="Toggle dark mode" type="button">
        <span class="icon" id="theme-icon">🌓</span>
        <span class="label" id="theme-label">Auto</span>
      </button>
    </nav>

    <main>
      <slot />
    </main>

    <script>
      // Toggle cycles: Auto → Dark → Light with tiny icon animation
      (() => {
        const btn = document.getElementById("theme-toggle");
        const label = document.getElementById("theme-label");
        const icon = document.getElementById("theme-icon");

        const getState = () => {
          const attr = document.documentElement.getAttribute("data-theme");
          if (!attr) return "auto";
          return attr; // "light" | "dark"
        };

        const setState = (state, animate = false) => {
          if (state === "auto") {
            document.documentElement.removeAttribute("data-theme");
            try { localStorage.removeItem("pg-theme"); } catch {}
            icon.textContent = "🌓";
            label.textContent = "Auto";
          } else if (state === "dark") {
            document.documentElement.setAttribute("data-theme", "dark");
            try { localStorage.setItem("pg-theme", "dark"); } catch {}
            icon.textContent = "🌙";
            label.textContent = "Dark";
          } else {
            document.documentElement.setAttribute("data-theme", "light");
            try { localStorage.setItem("pg-theme", "light"); } catch {}
            icon.textContent = "☀️";
            label.textContent = "Light";
          }

          if (animate) {
            icon.classList.remove("icon-animate");
            void icon.offsetWidth; // restart animation
            icon.classList.add("icon-animate");
          }
        };

        setState(getState(), false);

        btn.addEventListener("click", () => {
          const current = getState();
          const next = current === "auto" ? "dark" : current === "dark" ? "light" : "auto";
          setState(next, true);
        });
      })();
    </script>
  </body>
</html>




