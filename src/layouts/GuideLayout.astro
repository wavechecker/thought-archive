---
/**
 * GuideLayout.astro
 * Renders one guide page with SEO + JSON-LD:
 *  - Article/WebPage (always)
 *  - MedicalCondition (if schema.medicalCondition)
 *  - MedicalDevice (if schema.medicalDevice)
 *  - MedicalProcedure (if schema.medicalProcedure)
 *  - MedicalSignOrSymptom (if schema.medicalSignOrSymptom)
 *  - FAQPage (if faq array)
 *  - BreadcrumbList (Guides → Category → Title)
 */
import { isValidDate } from "@/lib/date.ts";

// Frontmatter props
const {
  title,
  description,
  category,
  publishDate,
  updatedDate,
  tags = [],
  heroImage = "/images/lada-guide-hero.jpg",

  // Structured inputs
  faq = [],                 // [{ q, a }]
  sameAs = [],             // external refs (WHO, MedlinePlus, etc.)
  breadcrumbs = [],        // optional manual override
  schema = {}              // { medicalCondition?, medicalDevice?, medicalProcedure?, medicalSignOrSymptom? }
} = Astro.props;

// Dates
const pub = isValidDate(publishDate) ? publishDate : undefined;
const mod = isValidDate(updatedDate) ? updatedDate : pub;

// Canonical URL
const site = Astro.site?.toString().replace(/\/+$/, "") ?? "https://patientguide.io";
const canonicalPath = Astro.url.pathname.replace(/\/+$/, "") || "/guides";
const canonicalUrl = `${site}${canonicalPath}`;

// Hero image → absolute
const heroAbs = heroImage
  ? (heroImage.startsWith("http") ? heroImage : `${site}${heroImage}`)
  : undefined;

// Breadcrumbs
const bc = breadcrumbs.length
  ? breadcrumbs
  : [
      { name: "Guides", url: `${site}/guides` },
      { name: category ?? "General", url: `${site}/guides?category=${encodeURIComponent(category ?? "General")}` },
      { name: title ?? "Guide", url: canonicalUrl },
    ];

/* ------------------------- JSON-LD builders ------------------------- */

// 1) Article/WebPage
const articleLd = {
  "@context": "https://schema.org",
  "@type": ["Article", "WebPage"],
  "mainEntityOfPage": { "@type": "WebPage", "@id": canonicalUrl },
  "headline": title,
  "description": description ?? "",
  "keywords": Array.isArray(tags) && tags.length ? tags : undefined,
  "datePublished": pub ?? undefined,
  "dateModified": mod ?? undefined,
  "author": { "@type": "Organization", "name": "patientguide.io", "url": site },
  "publisher": {
    "@type": "Organization",
    "name": "patientguide.io",
    "logo": { "@type": "ImageObject", "url": `${site}/logo.png` }
  },
  "isPartOf": {
    "@type": "Collection",
    "name": `${category ?? "Guides"} Guides`,
    "url": `${site}/guides?category=${encodeURIComponent(category ?? "General")}`
  },
  "inLanguage": "en",
  "image": heroAbs,
  "about": (title ? { "@type": "Thing", "name": title, "sameAs": sameAs && sameAs.length ? sameAs : undefined } : undefined)
};

// 2) MedicalCondition
function buildMedicalConditionLD(med) {
  if (!med || typeof med !== "object") return null;

  const riskFactor = Array.isArray(med.riskFactors) && med.riskFactors.length
    ? med.riskFactors.map((r) => ({ "@type": "MedicalRiskFactor", "name": r }))
    : undefined;

  const signOrSymptom = Array.isArray(med.symptoms) && med.symptoms.length
    ? med.symptoms.map((s) => ({ "@type": "MedicalSignOrSymptom", "name": s }))
    : undefined;

  const infectiousAgentClass = (typeof med.contagious === "boolean")
    ? (med.contagious ? "Pathogen" : undefined)
    : undefined;

  return {
    "@context": "https://schema.org",
    "@type": "MedicalCondition",
    "name": med.name ?? title,
    "description": med.description ?? description,
    "alternateName": Array.isArray(med.alternateName) && med.alternateName.length ? med.alternateName : undefined,
    "riskFactor": riskFactor,
    "signOrSymptom": signOrSymptom,
    "possibleComplication": Array.isArray(med.possibleComplication) && med.possibleComplication.length ? med.possibleComplication : undefined,
    "infectiousAgentClass": infectiousAgentClass,
    "sameAs": Array.isArray(med.sameAs) && med.sameAs.length ? med.sameAs : undefined,
    "url": canonicalUrl
  };
}

// 3) MedicalDevice
function buildMedicalDeviceLD(dev) {
  if (!dev || typeof dev !== "object") return null;
  return {
    "@context": "https://schema.org",
    "@type": "MedicalDevice",
    "name": dev.name ?? title,
    "description": dev.description ?? description,
    "manufacturer": dev.manufacturer ? { "@type": "Organization", "name": dev.manufacturer } : undefined,
    "model": dev.model,
    "sameAs": Array.isArray(dev.sameAs) && dev.sameAs.length ? dev.sameAs : undefined,
    "url": canonicalUrl
  };
}

// 4) MedicalProcedure
function buildMedicalProcedureLD(proc) {
  if (!proc || typeof proc !== "object") return null;
  return {
    "@context": "https://schema.org",
    "@type": "MedicalProcedure",
    "name": proc.name ?? title,
    "description": proc.description ?? description,
    "howPerformed": proc.howPerformed,
    "preparation": proc.preparation,
    "followup": proc.followup,
    "sameAs": Array.isArray(proc.sameAs) && proc.sameAs.length ? proc.sameAs : undefined,
    "url": canonicalUrl
  };
}

// 5) MedicalSignOrSymptom
function buildMedicalSignOrSymptomLD(sym) {
  if (!sym || typeof sym !== "object") return null;
  return {
    "@context": "https://schema.org",
    "@type": "MedicalSignOrSymptom",
    "name": sym.name ?? title,
    "description": sym.description ?? description,
    "possibleTreatment": Array.isArray(sym.possibleTreatment) && sym.possibleTreatment.length ? sym.possibleTreatment : undefined,
    "identifyingTest": Array.isArray(sym.identifyingTest) && sym.identifyingTest.length ? sym.identifyingTest : undefined,
    "sameAs": Array.isArray(sym.sameAs) && sym.sameAs.length ? sym.sameAs : undefined,
    "url": canonicalUrl
  };
}

const conditionLd = buildMedicalConditionLD(schema?.medicalCondition);
const deviceLd = buildMedicalDeviceLD(schema?.medicalDevice);
const procedureLd = buildMedicalProcedureLD(schema?.medicalProcedure);
const signOrSymptomLd = buildMedicalSignOrSymptomLD(schema?.medicalSignOrSymptom);

// 6) FAQPage
const faqLd = Array.isArray(faq) && faq.length
  ? {
      "@context": "https://schema.org",
      "@type": "FAQPage",
      "mainEntity": faq.map((item) => ({
        "@type": "Question",
        "name": item.q,
        "acceptedAnswer": { "@type": "Answer", "text": item.a }
      }))
    }
  : null;

// 7) BreadcrumbList
const breadcrumbLd = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": bc.map((b, i) => ({
    "@type": "ListItem",
    "position": i + 1,
    "name": b.name,
    "item": b.url
  }))
};
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>{title} | patientguide.io</title>
    <meta name="description" content={description ?? ""} />
    <link rel="canonical" href={canonicalUrl} />

    <!-- OpenGraph -->
    <meta property="og:type" content="article" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description ?? ""} />
    <meta property="og:url" content={canonicalUrl} />
    <meta property="og:site_name" content="patientguide.io" />
    {heroAbs && <meta property="og:image" content={heroAbs} />}
    {pub && <meta property="article:published_time" content={pub} />}
    {mod && <meta property="article:modified_time" content={mod} />}

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description ?? ""} />
    {heroAbs && <meta name="twitter:image" content={heroAbs} />}
    <meta name="twitter:site" content="@patientguide" />

    <!-- JSON-LD: Article/WebPage -->
    <script type="application/ld+json">
      {JSON.stringify(articleLd)}
    </script>

    <!-- JSON-LD: Medical schemas (conditional) -->
    {conditionLd && (
      <script type="application/ld+json">
        {JSON.stringify(conditionLd)}
      </script>
    )}
    {deviceLd && (
      <script type="application/ld+json">
        {JSON.stringify(deviceLd)}
      </script>
    )}
    {procedureLd && (
      <script type="application/ld+json">
        {JSON.stringify(procedureLd)}
      </script>
    )}
    {signOrSymptomLd && (
      <script type="application/ld+json">
        {JSON.stringify(signOrSymptomLd)}
      </script>
    )}

    <!-- JSON-LD: FAQPage (conditional) -->
    {faqLd && (
      <script type="application/ld+json">
        {JSON.stringify(faqLd)}
      </script>
    )}

    <!-- JSON-LD: BreadcrumbList -->
    <script type="application/ld+json">
      {JSON.stringify(breadcrumbLd)}
    </script>
  </head>

  <body class="min-h-screen">
    <main class="container mx-auto px-4 py-8">
      <article class="prose lg:prose-lg max-w-none">
        <slot />
      </article>
    </main>
  </body>
</html>




