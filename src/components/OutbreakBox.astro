---
import * as datasets from "@/data/outbreaks/index.ts";
// If you already have these helpers, use them; otherwise the fallbacks below handle formatting.
let fmt = (d: Date, locale = "en-US") =>
  d.toLocaleDateString(locale, { year: "numeric", month: "long", day: "numeric" });
let isValidDate = (d: Date) => !isNaN(d.getTime());

type Props = {
  /** Which dataset to use, e.g. "measlesUS" exported from /src/data/outbreaks/index.ts */
  dataKey: keyof typeof datasets;
  /** Optional: filter for a specific year (defaults to max year) */
  year?: number;
  /** Optional: override display locale for date formatting */
  locale?: string;
};

const { dataKey, year, locale = "en-US" } = Astro.props as Props;
const data = (datasets as any)[dataKey] as import("@/data/outbreaks/index.ts").OutbreakDataset;

if (!data) throw new Error(`OutbreakBox: dataset "${String(dataKey)}" not found.`);

// pick the row for the requested year, or the latest year
const rows = data.series.slice().sort((a, b) => a.year - b.year);
const selected = year ? rows.find(r => r.year === year) : rows[rows.length - 1];

if (!selected) throw new Error(`OutbreakBox: no data available for ${year ?? "latest year"}.`);

const last = new Date(selected.lastUpdated);
const safeLast =
  isValidDate(last) ? fmt(last, locale) : selected.lastUpdated;

const hasOutbreaks = typeof selected.outbreaksInvestigated === "number";
---

<div class="border-l-4 border-red-600 bg-red-50 p-4 my-6 rounded-lg shadow-sm text-sm">
  <p class="font-semibold text-red-700">
    {data.condition} {selected.year} â€” {data.region}
  </p>
  <ul class="mt-1 text-gray-800">
    <li><strong>Confirmed cases:</strong> {selected.confirmedCases}</li>
    {hasOutbreaks && <li><strong>Outbreaks under investigation:</strong> {selected.outbreaksInvestigated}</li>}
    <li><strong>Last updated:</strong> {safeLast}</li>
    <li class="italic text-gray-600">
      Source: {selected.sourceUrl
        ? <a href={selected.sourceUrl} target="_blank" rel="noopener noreferrer" class="underline">{selected.sourceName}</a>
        : data.series[0]?.sourceName}
    </li>
  </ul>
</div>

