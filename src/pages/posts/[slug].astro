---
import Layout from "@/layouts/Layout.astro";
import { getCollection, getEntryBySlug } from "astro:content";
import { isValidDate, fmt } from "@/lib/date";

export const prerender = true;

// Build only published posts (draft !== true)
export async function getStaticPaths() {
  const entries = await getCollection("posts", ({ data }) => data?.draft !== true);
  return entries.map((e) => ({ params: { slug: e.slug } }));
}

const { slug } = Astro.params;

// Hard guard: if slug is missing or bad, 404 (never 500)
if (!slug || typeof slug !== "string") {
  return Astro.redirect("/404");
}

const entry = await getEntryBySlug("posts", slug);

// If somehow a stale path sneaks in (old cache, bot, etc.)
if (!entry || entry.data?.draft === true) {
  return Astro.redirect("/404");
}

// Render MD content + frontmatter
const { Content } = await entry.render();
const data = entry.data;

// Site + canonical
const site = Astro.site?.toString().replace(/\/+$/, "") || "https://patientguide.io";
const url = `${site}/posts/${entry.slug}`;

// Hero image (frontmatter override or fallback) + absolute URL for sharing/LD
const hero = data?.image ?? "/og-default.png";
const heroAbs = hero.startsWith("http") ? hero : `${site}${hero}`;

// Dates
const pub = isValidDate?.(data.publishDate) ? data.publishDate : undefined;
const mod = isValidDate?.(data.updatedDate) ? data.updatedDate : pub;

// ---------- JSON-LD (BlogPosting) ----------
const blogLd = {
  "@context": "https://schema.org",
  "@type": ["BlogPosting", "Article"],
  "mainEntityOfPage": { "@type": "WebPage", "@id": url },
  "headline": data.title,
  "description": data.description ?? "",
  "image": heroAbs,
  "datePublished": pub,
  "dateModified": mod,
  "author": { "@type": "Person", "name": data.author ?? "patientguide.io" },
  "publisher": {
    "@type": "Organization",
    "name": "patientguide.io",
    "logo": { "@type": "ImageObject", "url": `${site}/logo.png` }
  },
  "inLanguage": "en",
  "url": url,
  "keywords": Array.isArray(data.tags) && data.tags.length ? data.tags : undefined
};
---

<Layout frontmatter={data}>
  <!-- Put meta + JSON-LD into the layout head -->
  <Fragment slot="head">
    <link rel="canonical" href={url} />

    <!-- OpenGraph -->
    <meta property="og:type" content="article" />
    <meta property="og:title" content={data.title} />
    <meta property="og:description" content={data.description ?? ""} />
    <meta property="og:url" content={url} />
    <meta property="og:site_name" content="patientguide.io" />
    <meta property="og:image" content={heroAbs} />
    {pub && <meta property="article:published_time" content={pub} />}
    {mod && <meta property="article:modified_time" content={mod} />}

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={data.title} />
    <meta name="twitter:description" content={data.description ?? ""} />
    <meta name="twitter:image" content={heroAbs} />
    <meta name="twitter:site" content="@patientguide" />

    <!-- JSON-LD -->
    <script type="application/ld+json" is:inline set:html={JSON.stringify(blogLd)} />
  </Fragment>

  <article class="mx-auto max-w-3xl">
    <header class="mb-6">
      <h1 class="text-3xl/tight font-semibold tracking-tight">
        {data?.title ?? "Untitled"}
      </h1>

      <p class="mt-2 text-sm text-slate-500">
        {pub ? fmt(pub) : ""}
        {mod && pub !== mod ? ` â€¢ Updated ${fmt(mod)}` : ""}
      </p>

      <img
        src={hero}
        alt={data?.title ?? "Hero image"}
        class="mt-4 aspect-[1200/630] w-full rounded-xl object-cover"
        loading="lazy"
      />
    </header>

    <div class="prose prose-slate max-w-none">
      <Content />
    </div>

    {data?.tags?.length > 0 && (
      <ul class="mt-6 flex flex-wrap gap-2">
        {data.tags.map((t) => (
          <li class="rounded-full bg-slate-100 px-3 py-1 text-xs font-medium text-slate-700">
            #{t}
          </li>
        ))}
      </ul>
    )}
  </article>
</Layout>


