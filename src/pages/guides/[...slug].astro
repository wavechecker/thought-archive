---
import { getCollection, getEntryBySlug } from "astro:content";
import { isValidDate } from "@/lib/date";

// Static paths from collection (skip drafts)
export const prerender = true;
export async function getStaticPaths() {
  const entries = await getCollection("guides", ({ data }) => data?.draft !== true);
  return entries.map((e) => ({ params: { slug: e.slug } }));
}

// Resolve slug param to "a/b/c"
const slugParam = Astro.params.slug;
const slug = Array.isArray(slugParam) ? slugParam.join("/") : (slugParam ?? "");

if (!slug) return Astro.redirect("/404");

const entry = await getEntryBySlug("guides", slug);
if (!entry || entry.data?.draft === true) return Astro.redirect("/404");

const { Content } = await entry.render();
const data = entry.data;

// Canonical + site
const site = Astro.site?.toString().replace(/\/+$/, "") || "https://patientguide.io";
const canonicalUrl = `${site}/guides/${entry.slug}`;

// Dates (ISO yyyy-mm-dd)
const pub = isValidDate?.(data.publishDate) ? data.publishDate : undefined;
const mod = isValidDate?.(data.updatedDate) ? data.updatedDate : pub;

// Hero image absolute
const heroLocal = data?.image ?? data?.heroImage ?? "/og-default.png";
const heroAbs = heroLocal.startsWith("http") ? heroLocal : `${site}${heroLocal}`;

// Breadcrumbs
const breadcrumbs = [
  { name: "Guides", url: `${site}/guides` },
  { name: data?.category ?? "General", url: `${site}/guides?category=${encodeURIComponent(data?.category ?? "General")}` },
  { name: data?.title ?? "Guide", url: canonicalUrl }
];

// ---------- JSON-LD builders ----------
const articleLd = {
  "@context": "https://schema.org",
  "@type": ["Article", "WebPage"],
  "mainEntityOfPage": { "@type": "WebPage", "@id": canonicalUrl },
  "headline": data.title,
  "description": data.description ?? "",
  "keywords": Array.isArray(data.tags) && data.tags.length ? data.tags : undefined,
  "datePublished": pub ?? undefined,
  "dateModified": mod ?? undefined,
  "author": { "@type": "Organization", "name": "patientguide.io", "url": site },
  "publisher": {
    "@type": "Organization",
    "name": "patientguide.io",
    "logo": { "@type": "ImageObject", "url": `${site}/logo.png` }
  },
  "isPartOf": {
    "@type": "Collection",
    "name": `${data?.category ?? "Guides"} Guides`,
    "url": `${site}/guides?category=${encodeURIComponent(data?.category ?? "General")}`
  },
  "inLanguage": "en",
  "image": heroAbs,
  "about": (data.title ? { "@type": "Thing", "name": data.title, "sameAs": data?.sameAs } : undefined)
};

// Map schema.* if present
function buildConditionLD(med) {
  if (!med) return null;
  const rf = Array.isArray(med.riskFactors) && med.riskFactors.length
    ? med.riskFactors.map((r) => ({ "@type": "MedicalRiskFactor", name: r })) : undefined;
  const ss = Array.isArray(med.symptoms) && med.symptoms.length
    ? med.symptoms.map((s) => ({ "@type": "MedicalSignOrSymptom", name: s })) : undefined;
  return {
    "@context": "https://schema.org",
    "@type": "MedicalCondition",
    name: med.name ?? data.title,
    description: med.description ?? data.description,
    alternateName: med.alternateName && med.alternateName.length ? med.alternateName : undefined,
    riskFactor: rf,
    signOrSymptom: ss,
    possibleComplication: med.possibleComplication && med.possibleComplication.length ? med.possibleComplication : undefined,
    infectiousAgentClass: typeof med.contagious === "boolean" ? (med.contagious ? "Pathogen" : undefined) : undefined,
    sameAs: med.sameAs && med.sameAs.length ? med.sameAs : undefined,
    url: canonicalUrl
  };
}
function buildDeviceLD(d) {
  if (!d) return null;
  return {
    "@context": "https://schema.org",
    "@type": "MedicalDevice",
    name: d.name ?? data.title,
    description: d.description ?? data.description,
    manufacturer: d.manufacturer ? { "@type": "Organization", name: d.manufacturer } : undefined,
    model: d.model,
    sameAs: d.sameAs && d.sameAs.length ? d.sameAs : undefined,
    url: canonicalUrl
  };
}
function buildProcedureLD(p) {
  if (!p) return null;
  return {
    "@context": "https://schema.org",
    "@type": "MedicalProcedure",
    name: p.name ?? data.title,
    description: p.description ?? data.description,
    howPerformed: p.howPerformed,
    preparation: p.preparation,
    followup: p.followup,
    sameAs: p.sameAs && p.sameAs.length ? p.sameAs : undefined,
    url: canonicalUrl
  };
}
function buildSignOrSymptomLD(s) {
  if (!s) return null;
  return {
    "@context": "https://schema.org",
    "@type": "MedicalSignOrSymptom",
    name: s.name ?? data.title,
    description: s.description ?? data.description,
    possibleTreatment: s.possibleTreatment && s.possibleTreatment.length ? s.possibleTreatment : undefined,
    identifyingTest: s.identifyingTest && s.identifyingTest.length ? s.identifyingTest : undefined,
    sameAs: s.sameAs && s.sameAs.length ? s.sameAs : undefined,
    url: canonicalUrl
  };
}

const medicalConditionLd = buildConditionLD(data?.schema?.medicalCondition);
const medicalDeviceLd = buildDeviceLD(data?.schema?.medicalDevice);
const medicalProcedureLd = buildProcedureLD(data?.schema?.medicalProcedure);
const medicalSignOrSymptomLd = buildSignOrSymptomLD(data?.schema?.medicalSignOrSymptom);

// Always provide a FAQPage (fallback if missing)
const faqArray = Array.isArray(data?.faq) && data.faq.length
  ? data.faq
  : [
      {
        q: `What is ${data?.title ?? "this condition"}?`,
        a: data?.description ?? "A brief overview of this topic."
      }
    ];

const faqLd = {
  "@context": "https://schema.org",
  "@type": "FAQPage",
  "mainEntity": faqArray.map((item) => ({
    "@type": "Question",
    name: item.q,
    acceptedAnswer: { "@type": "Answer", text: item.a }
  }))
};

const breadcrumbLd = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": breadcrumbs.map((b, i) => ({
    "@type": "ListItem",
    position: i + 1,
    name: b.name,
    item: b.url
  }))
};
---

<head>
  <meta charset="utf-8" />
  <title>{data.title} | patientguide.io</title>
  <meta name="description" content={data.description ?? ""} />
  <link rel="canonical" href={canonicalUrl} />

  <!-- OpenGraph -->
  <meta property="og:type" content="article" />
  <meta property="og:title" content={data.title} />
  <meta property="og:description" content={data.description ?? ""} />
  <meta property="og:url" content={canonicalUrl} />
  <meta property="og:site_name" content="patientguide.io" />
  <meta property="og:image" content={heroAbs} />
  {pub && <meta property="article:published_time" content={pub} />}
  {mod && <meta property="article:modified_time" content={mod} />}

  <!-- Twitter -->
  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:title" content={data.title} />
  <meta name="twitter:description" content={data.description ?? ""} />
  <meta name="twitter:image" content={heroAbs} />
  <meta name="twitter:site" content="@patientguide" />

  <!-- JSON-LD blocks (self-closing with set:html so they’re truly inline JSON) -->
  <script type="application/ld+json" is:inline set:html={JSON.stringify(articleLd)} />
  {medicalConditionLd && <script type="application/ld+json" is:inline set:html={JSON.stringify(medicalConditionLd)} />}
  {medicalDeviceLd && <script type="application/ld+json" is:inline set:html={JSON.stringify(medicalDeviceLd)} />}
  {medicalProcedureLd && <script type="application/ld+json" is:inline set:html={JSON.stringify(medicalProcedureLd)} />}
  {medicalSignOrSymptomLd && <script type="application/ld+json" is:inline set:html={JSON.stringify(medicalSignOrSymptomLd)} />}
  <script type="application/ld+json" is:inline set:html={JSON.stringify(faqLd)} />
  <script type="application/ld+json" is:inline set:html={JSON.stringify(breadcrumbLd)} />
</head>

<body class="min-h-screen">
  <main class="container mx-auto px-4 py-8">
    <article class="prose lg:prose-lg max-w-none">
      <header class="mb-6">
        <p class="text-xs uppercase tracking-wide text-slate-500">{data?.category ?? "Guide"}</p>
        <h1 class="mt-1 text-3xl/tight font-semibold tracking-tight">{data?.title ?? "Untitled"}</h1>
        {(pub || mod) && (
          <p class="mt-2 text-sm text-slate-500">
            {pub}{mod && pub !== mod ? ` • Updated ${mod}` : ""}
          </p>
        )}
        <img src={heroLocal} alt={data?.title ?? "Hero"} class="mt-4 aspect-[1200/630] w-full rounded-xl object-cover" loading="lazy" />
      </header>

      <Content />

      {Array.isArray(data?.tags) && data.tags.length > 0 && (
        <ul class="mt-6 flex flex-wrap gap-2">
          {data.tags.map((t) => (
            <li class="rounded-full bg-slate-100 px-3 py-1 text-xs font-medium text-slate-700">#{t}</li>
          ))}
        </ul>
      )}
    </article>
  </main>
</body>





