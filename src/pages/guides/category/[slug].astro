---
import Layout from "@/layouts/Layout.astro";
import { getCollection } from "astro:content";
import { isValidDate, fmt } from "@/lib/date";
import { unslugifyCategory } from "@/lib/slug";

export const prerender = true;

// Build-time: list all guides (exclude drafts)
const allGuides = await getCollection("guides", ({ data }) => data?.draft !== true);

/** Generate static paths for every category in your content */
export async function getStaticPaths() {
  const categories = Array.from(
    new Set(
      (await getCollection("guides", ({ data }) => data?.draft !== true))
        .map((e) => (e.data?.category || "").trim())
        .filter(Boolean)
    )
  );

  const { slugifyCategory } = await import("@/lib/slug");
  return categories.map((name) => ({
    params: { slug: slugifyCategory(name) },
    props: { name },
  }));
}

// Decode + hard-guard slug
const rawSlug = Astro.params.slug;
const slug = typeof rawSlug === "string" ? decodeURIComponent(rawSlug) : "";
if (!slug) {
  return Astro.redirect("/404");
}

const categoryName = unslugifyCategory(slug);

// Filter guides by category (case-insensitive), newest first
const items = allGuides
  .filter((g) => (g.data.category || "").toLowerCase() === categoryName.toLowerCase())
  .sort(
    (a, b) => +new Date(b.data.publishDate as any) - +new Date(a.data.publishDate as any)
  );

const title = `${categoryName} â€” Guides`;
const desc = `All ${categoryName} guides (newest first).`;

// ---------- SEO / JSON-LD ----------
const site = Astro.site?.toString().replace(/\/+$/, "") || "https://patientguide.io";
const pageUrl = `${site}/guides/category/${encodeURIComponent(slug)}`;
const guidesIndexUrl = `${site}/guides`;

// ItemList for the category
const listItems = items.map((e, i) => ({
  "@type": "ListItem",
  position: i + 1,
  item: {
    "@type": "Article",
    headline: e.data.title ?? "(Untitled)",
    url: `${site}/guides/${e.slug}`
  }
}));

const collectionPageLd = {
  "@context": "https://schema.org",
  "@type": "CollectionPage",
  "@id": `${pageUrl}#collection`,
  name: title,
  description: desc,
  url: pageUrl,
  inLanguage: "en",
  isPartOf: {
    "@type": "WebSite",
    name: "patientguide.io",
    url: site
  }
};

const itemListLd = {
  "@context": "https://schema.org",
  "@type": "ItemList",
  "@id": `${pageUrl}#list`,
  inLanguage: "en",
  itemListOrder: "https://schema.org/ItemListOrderDescending",
  itemListElement: listItems
};

const breadcrumbLd = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "@id": `${pageUrl}#breadcrumbs`,
  itemListElement: [
    { "@type": "ListItem", position: 1, name: "Guides", item: guidesIndexUrl },
    { "@type": "ListItem", position: 2, name: categoryName, item: pageUrl }
  ]
};
---

<Layout frontmatter={{ title, description: desc }}>
  <!-- Head: canonical + JSON-LD -->
  <Fragment slot="head">
    <link rel="canonical" href={pageUrl} />
    <script type="application/ld+json" is:inline set:html={JSON.stringify(collectionPageLd)} />
    <script type="application/ld+json" is:inline set:html={JSON.stringify(itemListLd)} />
    <script type="application/ld+json" is:inline set:html={JSON.stringify(breadcrumbLd)} />
  </Fragment>

  <article class="mx-auto max-w-3xl">
    <header class="mb-6">
      <p class="text-xs uppercase tracking-wide text-slate-500">Category</p>
      <h1 class="mt-1 text-3xl/tight font-semibold tracking-tight">{categoryName}</h1>
      <p class="mt-2 text-sm text-slate-500">
        {items.length} guide{items.length === 1 ? "" : "s"}
      </p>
    </header>

    {items.length === 0 ? (
      <p class="text-slate-600">No guides found yet.</p>
    ) : (
      <ul class="space-y-3">
        {items.map((e) => (
          <li>
            <a class="text-sky-600 hover:underline" href={`/guides/${e.slug}`}>{e.data.title}</a>
            {isValidDate(e.data.publishDate) && (
              <span class="ml-2 text-sm text-slate-500">{fmt(e.data.publishDate)}</span>
            )}
          </li>
        ))}
      </ul>
    )}
  </article>
</Layout>
