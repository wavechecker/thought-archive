---
import Layout from "@/layouts/Layout.astro";
import { getCollection } from "astro:content";

// Define the hubs you actually expose (order matters for display)
const HUBS: Array<{ cat: string; href: string }> = [
  { cat: "Type 1 Diabetes", href: "/guides/type-1-diabetes/" },
  { cat: "Type 2 Diabetes", href: "/guides/type-2-diabetes/" },
  { cat: "Heart & Circulation", href: "/guides/heart-circulation/" },
  { cat: "Bowel Cancer", href: "/guides/bowel-cancer/" },
  { cat: "Cancer", href: "/guides/cancer/" },
  { cat: "Infectious Diseases", href: "/guides/infectious-diseases/" },
  { cat: "Emergencies", href: "/guides/emergencies/" },
];

const HUB_MAP = new Map(HUBS.map(h => [h.cat, h.href]));
const ALLOWED_LOWER = new Set(HUBS.map(h => h.cat.toLowerCase()));

const norm = (s: unknown) => String(s ?? "").toLowerCase().trim();
const firstMatchAllowed = (vals: string[] = []) => {
  for (const v of vals) {
    const n = norm(v);
    if (ALLOWED_LOWER.has(n)) {
      // return the original-cased category name from HUBS for consistent labels
      return HUBS.find(h => h.cat.toLowerCase() === n)!.cat;
    }
  }
  return undefined;
};

const all = await getCollection("guides");

// Group by category or matching tag (case-insensitive). Skip drafts.
const groups = new Map<string, typeof all>();
for (const e of all) {
  if (e.data?.draft === true) continue;

  // try category first, then tags
  const catFromCategory = typeof e.data?.category === "string" ? firstMatchAllowed([e.data.category]) : undefined;
  const catFromTags = Array.isArray(e.data?.tags) ? firstMatchAllowed(e.data.tags as string[]) : undefined;
  const cat = catFromCategory ?? catFromTags;

  if (!cat) continue; // ignore uncategorized content on this page

  if (!groups.has(cat)) groups.set(cat, []);
  groups.get(cat)!.push(e);
}

// Keep display order consistent with HUBS, but omit categories with 0 guides
const orderedCats = HUBS.map(h => h.cat).filter(cat => (groups.get(cat)?.length ?? 0) > 0);

const frontmatter = {
  title: "Guides — PatientGuide",
  description: "Browse all patient-friendly guides by category. Hubs stay in sync automatically.",
  publishDate: "2025-08-21",
  draft: false,
  tags: ["guides", "patientguide"],
};
---

<Layout {frontmatter}>
  <h1 class="text-3xl font-bold mb-6">Guide Hubs</h1>
  <p class="mb-8 text-lg text-gray-700">
    Categories below update automatically as you add or edit guides. Click a hub to explore.
  </p>

  <div class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
    {orderedCats.map((cat) => {
      const list = groups.get(cat) ?? [];
      const href = HUB_MAP.get(cat)!; // safe due to ALLOWED list
      return (
        <a href={href} class="block p-6 rounded-2xl shadow hover:shadow-lg transition bg-white">
          <h2 class="text-xl font-semibold mb-1">{cat} — Guide Hub</h2>
          <p class="text-gray-600 text-sm mb-3">Browse focused guides in this hub.</p>
          <p class="text-gray-800 text-sm">{list.length} guide{list.length === 1 ? "" : "s"}</p>
        </a>
      );
    })}
  </div>
</Layout>



