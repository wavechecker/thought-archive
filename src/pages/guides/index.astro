---
import { getCollection } from "astro:content";
import { fmt, isValidDate } from "@/lib/date.ts";
import {
  slugifyCategory,
  CATEGORY_ORDER,
  CATEGORY_DESCRIPTIONS,
} from "@/lib/slug.ts";

// Redirect legacy links like /guides/?category=Emergencies → /guides/category/emergencies
const q = Astro.url.searchParams.get("category");
if (q) {
  return Astro.redirect(`/guides/category/${slugifyCategory(q)}`, 301);
}

// Load all published guides
const guides = await getCollection("guides", ({ data }) => data?.draft !== true);

// ---- Featured row (Child & Adolescent Health) ----
const FEATURED = [
  {
    slug: "childhood-obesity-prevention",
    title: "Childhood Obesity Prevention",
    blurb:
      "Childhood obesity has now surpassed underweight globally, driven by ultra-processed foods, sugary drinks, and weak policy protections. This guide explains the causes, risks, and proven strategies for prevention at home, in schools, and through public policy."
  },
  {
    slug: "healthy-diets-for-children",
    title: "Healthy Diets for Children",
    blurb:
      "Balanced nutrition is key to children’s growth, learning, and long-term health. This guide explains the food groups, portion sizes, and simple strategies families can use to build healthier eating habits at home and in schools."
  },
  {
    slug: "diabetes-children",
    title: "Diabetes in Children and Adolescents",
    blurb:
      "Diabetes is rising among children worldwide, with type 1 remaining common and type 2 increasing rapidly due to obesity. This guide covers symptoms, diagnosis, treatment, and prevention, helping families and schools support affected children."
  }
];

// Map: slug -> entry (only if present)
const bySlug = new Map(guides.map((e) => [e.slug, e]));
const featuredEntries = FEATURED
  .map((f) => {
    const entry = bySlug.get(f.slug);
    return entry ? { ...f, href: `/guides/${entry.slug}` } : null;
  })
  .filter(Boolean);

// ---- Build map: category -> guides ----
const byCategory = new Map<string, typeof guides>();
for (const e of guides) {
  const cat = (e.data.category ?? "General Health").trim();
  if (!byCategory.has(cat)) byCategory.set(cat, []);
  byCategory.get(cat)!.push(e);
}

// Order categories by preferred list, then alpha for any extras
const categories = Array.from(byCategory.keys()).sort((a, b) => {
  const ia = CATEGORY_ORDER.indexOf(a);
  const ib = CATEGORY_ORDER.indexOf(b);
  if (ia === -1 && ib === -1) return a.localeCompare(b);
  if (ia === -1) return 1;
  if (ib === -1) return -1;
  return ia - ib;
});

const MAX_VISIBLE = 5;

// Optional overrides: point some categories to a hub page
const overrides: Record<string, string> = {
  "Mental Health": "/guides/mental-health",
  // Add more when ready:
  // "Child & Adolescent Health": "/guides/child-and-adolescent-health",
  // "Vaccination": "/guides/vaccination",
  // "Emergencies": "/guides/emergencies",
};
---

<h1>Guides</h1>
<p>Explore our library of health guides, organized by category. Click a topic to browse detailed guides.</p>

{featuredEntries.length > 0 && (
  <>
    <h2>Featured: Child &amp; Adolescent Health</h2>
    <div class="cards">
      {featuredEntries.map((f) => (
        <article class="card">
          <h3><a href={f!.href}>{f!.title}</a></h3>
          <p>{f!.blurb}</p>
        </article>
      ))}
    </div>
  </>
)}

<ul class="grid">
  {categories.map((cat) => {
    const list = byCategory.get(cat)!;
    const count = list.length;

    const defaultHref = `/guides/category/${slugifyCategory(cat)}`;
    const catHref = overrides[cat] ?? defaultHref;

    const sorted = list
      .slice()
      .sort(
        (a, b) =>
          +new Date((b.data.updatedDate ?? b.data.publishDate) as any) -
          +new Date((a.data.updatedDate ?? a.data.publishDate) as any)
      );

    const visible = sorted.slice(0, MAX_VISIBLE);
    const hidden = sorted.slice(MAX_VISIBLE);

    return (
      <li class="cat-card">
        <h3><a href={catHref}>{cat}</a></h3>
        <p>{CATEGORY_DESCRIPTIONS[cat] ?? "Browse guides in this topic."}</p>
        <small>{count} guide{count === 1 ? "" : "s"}</small>

        <ul class="mini">
          {visible.map((e) => {
            const href = `/guides/${e.slug}`;
            const title = e.data.title ?? "(Untitled)";
            const d = e.data.updatedDate ?? e.data.publishDate;
            return (
              <li>
                <a href={href}>{title}</a>
                {isValidDate(d) && <span class="date"> {fmt(d)}</span>}
              </li>
            );
          })}
        </ul>

        {hidden.length > 0 && (
          <details class="more">
            <summary>Show {hidden.length} more</summary>
            <ul class="mini">
              {hidden.map((e) => {
                const href = `/guides/${e.slug}`;
                const title = e.data.title ?? "(Untitled)";
                const d = e.data.updatedDate ?? e.data.publishDate;
                return (
                  <li>
                    <a href={href}>{title}</a>
                    {isValidDate(d) && <span class="date"> {fmt(d)}</span>}
                  </li>
                );
              })}
            </ul>
          </details>
        )}
      </li>
    );
  })}
</ul>

<style>
  .cards {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
    gap: 1.25rem;
    margin-block: .5rem 1.5rem;
  }
  .card {
    padding: 1rem;
    border: 1px solid var(--astro-border, #e5e7eb);
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.04);
    background: white;
  }
  .grid { 
    display:grid; 
    gap:1rem; 
    grid-template-columns: repeat(auto-fit, minmax(260px, 1fr)); 
    margin-top: .75rem;
  }
  .cat-card { 
    padding:1rem; 
    border:1px solid var(--astro-border, #e5e7eb); 
    border-radius:12px; 
    background: white;
  }
  .mini { margin-top:.5rem; padding-left:1rem; }
  .mini li { list-style: disc; }
  .date { color:#6b7280; font-size:.85em; margin-left:.35rem; }
  details.more { margin-top:.5rem; }
  details.more summary { cursor:pointer; text-decoration: underline; }
</style>
