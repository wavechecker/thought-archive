---
import { getCollection } from 'astro:content';

// 1) Load all published guides
const guides = await getCollection('guides', ({ data }) => data?.draft !== true);

// 2) Build a map: category -> array of guides
const byCategory = new Map<string, typeof guides>();
for (const e of guides) {
  const cat = e.data.category?.trim() || 'General Health';
  if (!byCategory.has(cat)) byCategory.set(cat, []);
  byCategory.get(cat)!.push(e);
}

// 3) Preferred category order; any others sorted alphabetically after
const preferredOrder = [
  'Emergencies',
  'Infectious Diseases',
  'Vaccination',
  'Heart & Circulation',
  'Women’s Health',
  'Diabetes',
  'Cancer',
  'Neurology',
  'Mental Health',
  'General Health',
  'End of Life',
  'Child & Adolescent Health',
  'Guide Hubs',
];

const categories = Array.from(byCategory.keys()).sort((a, b) => {
  const ia = preferredOrder.indexOf(a);
  const ib = preferredOrder.indexOf(b);
  if (ia === -1 && ib === -1) return a.localeCompare(b);
  if (ia === -1) return 1;
  if (ib === -1) return -1;
  return ia - ib;
});

// 4) Optional descriptions
const catDesc: Record<string, string> = {
  'Emergencies': 'What to do in urgent situations.',
  'Infectious Diseases': 'Prevention, treatment, and key facts.',
  'Vaccination': 'Vaccines, schedules, and safety.',
  'Heart & Circulation': 'Cardiac health and risk management.',
  'Women’s Health': 'Conditions, prevention, and care options.',
  'Diabetes': 'Type 1, Type 2, and management strategies.',
  'Cancer': 'Screening, treatment, and support resources.',
  'Neurology': 'Brain and nervous system conditions.',
  'General Health': 'Lifestyle, prevention, and wellness.',
  'Mental Health': 'Emotional well-being, psychology, and psychiatry.',
  'End of Life': 'Voluntary assisted dying, palliation, choices.',
  'Child & Adolescent Health': 'Browse guides in this topic.',
  'Guide Hubs': 'Browse topical hubs.',
};
---

<h1>Guides</h1>
<p>Explore our library of health guides, organized by category. Click a topic to browse detailed guides.</p>

<ul class="grid">
  {categories.map((cat) => {
    const list = byCategory.get(cat)!;
    const count = list.length;
    return (
      <li class="card">
        <h3><a href={`/guides/?category=${encodeURIComponent(cat)}`}>{cat}</a></h3>
        <p>{catDesc[cat] ?? 'Browse guides in this topic.'}</p>
        <small>{count} guide{count === 1 ? '' : 's'}</small>
        <ul class="mini">
          {list
            .slice()
            .sort((a, b) =>
              new Date(b.data.updatedDate ?? b.data.publishDate).getTime()
              - new Date(a.data.updatedDate ?? a.data.publishDate).getTime()
            )
            .slice(0, 5)
            .map((e) => {
              const href = `/guides/${e.slug}`;      // ← use entry.slug
              const title = e.data.title ?? '(Untitled)';
              return <li><a href={href}>{title}</a></li>;
            })}
        </ul>
      </li>
    );
  })}
</ul>

<style>
  .grid { display:grid; gap:1rem; grid-template-columns: repeat(auto-fit, minmax(260px, 1fr)); }
  .card { padding:1rem; border:1px solid var(--astro-border, #e5e7eb); border-radius:12px; }
  .mini { margin-top:.5rem; padding-left:1rem; }
  .mini li { list-style: disc; }
</style>









