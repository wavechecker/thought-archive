---
import Layout from "@/layouts/Layout.astro";
import { getCollection } from "astro:content";
import { isValidDate, fmt } from "@/lib/date"; // ✅ date helpers

// Hubs to feature on the landing page (order matters)
const HUBS: Array<{ label: string; href: string; blurb?: string }> = [
  { label: "Type 1 Diabetes", href: "/guides/type-1-diabetes/", blurb: "Start here for T1D basics." },
  { label: "Type 2 Diabetes", href: "/guides/type-2-diabetes/", blurb: "Practical guides for T2D." },
  { label: "Heart & Circulation", href: "/guides/heart-circulation/", blurb: "Cardiac & vascular care." },
  { label: "Cancer", href: "/guides/cancer/", blurb: "Screening, treatment, survivorship." }, // ✅ renamed
  { label: "Infectious Diseases", href: "/guides/infectious-diseases/", blurb: "Prevention and treatment." },
  { label: "Emergencies", href: "/guides/emergencies/", blurb: "When to act fast and how." },
  // ✅ New Posts hub tile
  { label: "Posts", href: "/posts/", blurb: "Opinion & analysis linked to evergreen guides." },
];

// All guides (exclude drafts), newest first
const all = (await getCollection("guides"))
  .filter((e) => e.data?.draft !== true)
  .sort((a, b) => {
    const da = new Date(a.data?.updatedDate ?? a.data?.publishDate ?? 0).valueOf();
    const db = new Date(b.data?.updatedDate ?? b.data?.publishDate ?? 0).valueOf();
    return db - da || String(a.data?.title).localeCompare(String(b.data?.title));
  });

// Posts (exclude drafts), newest first; show latest 5
const posts = (await getCollection("posts"))
  .filter((p) => p.data?.draft !== true)
  .sort((a, b) => {
    const da = new Date(a.data?.updatedDate ?? a.data?.publishDate ?? 0).valueOf();
    const db = new Date(b.data?.updatedDate ?? b.data?.publishDate ?? 0).valueOf();
    return db - da || String(a.data?.title).localeCompare(String(b.data?.title));
  })
  .slice(0, 5);

// Page meta
const frontmatter = {
  title: "Patient Guide — Clear, practical health guides",
  description: "Clear, practical health guides — no fluff.",
};
---

<Layout {frontmatter}>
  <!-- Hero -->
  <section class="py-10">
    <h1 class="text-4xl font-bold mb-3">Patient Guide</h1>
    <p class="text-lg text-gray-700">Clear, practical health guides — no fluff.</p>
  </section>

  <!-- Hubs -->
  <section class="mt-8">
    <h2 class="text-2xl font-semibold mb-4">Start here</h2>
    <div class="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
      {HUBS.map((hub) => (
        <a href={hub.href} class="block p-5 rounded-2xl shadow hover:shadow-lg transition bg-white">
          <h3 class="text-xl font-semibold mb-1">{hub.label} Hub</h3>
          {hub.blurb && <p class="text-sm text-gray-600">{hub.blurb}</p>}
        </a>
      ))}
    </div>
  </section>

  <!-- All Guides -->
  <section class="mt-12">
    <h2 class="text-2xl font-semibold mb-4">All guides</h2>

    {all.length === 0 ? (
      <p>No guides yet.</p>
    ) : (
      <ul class="divide-y divide-gray-200 bg-white rounded-2xl shadow">
        {all.map((e) => {
          const href = `/guides/${e.slug}/`; // ✅ collection slug → correct link
          const title = e.data?.title ?? "(Untitled)";
          const desc = e.data?.description ?? "";
          const cat = e.data?.category ?? "";
          return (
            <li class="p-5">
              <a href={href} class="text-lg font-medium hover:underline">{title}</a>
              {cat && <span class="ml-2 text-xs px-2 py-0.5 rounded-full bg-gray-100 text-gray-600 align-middle">{cat}</span>}
              {desc && <p class="text-sm text-gray-600 mt-1">{desc}</p>}
            </li>
          );
        })}
      </ul>
    )}
  </section>

  <!-- Latest Posts -->
  <section class="mt-12">
    <h2 class="text-2xl font-semibold mb-4">Latest posts</h2>
    {posts.length === 0 ? (
      <p>No posts yet.</p>
    ) : (
      <ul class="divide-y divide-gray-200 bg-white rounded-2xl shadow">
        {posts.map((p) => {
          const href = `/posts/${p.slug}/`;
          const title = p.data?.title ?? "(Untitled)";
          const desc = p.data?.description ?? "";
          const rawDate = p.data?.updatedDate ?? p.data?.publishDate;
          const date = isValidDate(rawDate) ? fmt(rawDate) : null;
          return (
            <li class="p-5">
              <a href={href} class="text-lg font-medium hover:underline">{title}</a>
              {date && <span class="ml-2 text-xs text-gray-500 align-middle">{date}</span>}
              {desc && <p class="text-sm text-gray-600 mt-1">{desc}</p>}
            </li>
          );
        })}
      </ul>
    )}
  </section>
</Layout>
